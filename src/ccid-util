#!/usr/bin/python

from emv_applet import EMVShell

import gobject, gtk
import ccid

__copyright__ = 'Copyright (c) 2011 Gianni Tedesco'
__licence__ = 'GPLv3'

class CCIDeviceView(gtk.TreeView):
	def __init__(self, callback = None):
		self.callback = callback
		self.store = gtk.TreeStore(gobject.TYPE_PYOBJECT,
						gobject.TYPE_STRING,
						gobject.TYPE_STRING)
		gtk.TreeView.__init__(self, self.store)

		self.set_headers_visible(False)
		self.set_headers_clickable(False)
		self.set_enable_search(False)
		self.set_search_column(0)

		r = gtk.CellRendererText()
		i = gtk.CellRendererPixbuf()
		col = gtk.TreeViewColumn('Devices', None)
		col.pack_start(i, True)
		col.add_attribute(i, 'stock-id', 1)
		col.pack_start(r, True)
		col.add_attribute(r, 'text', 2)
		col.set_resizable(True)
		self.append_column(col)

		sel = self.get_selection()
		sel.connect('changed', self.__cb)
		self.connect('button-press-event', self.__button)
		self.refresh()

	def __cb(self, sel):
		if self.callback is None:
			return
		(store, i) = sel.get_selected()
		if i is None:
			return

		obj = store.get_value(i, 0)
		self.callback(obj)

	def __button(self, _, ev):
		if ev.button == 1:
			self.__cb(self.get_selection())

	def __dev(self, itr, dev):
		i = 0
		for cci in dev.interfaces:
			try:
				cci.on(ccid.CHIPCARD_AUTO_VOLTAGE)
			except IOError:
				# maybe no card
				pass
			n = isinstance(cci, ccid.rfid) and 'Field' or 'Slot'
			t = isinstance(cci, ccid.rfid) and 'Tag' or 'Card'
			if cci.status in [ccid.CHIPCARD_PRESENT,
						ccid.CHIPCARD_ACTIVE]:
				status = '%s Present'%t
			else:
				status = 'Empty'
			label = '%s %d\n%s'%(n, cci.index, status)
			icon = gtk.STOCK_FILE
			self.store.append(itr, (cci, icon, label))
			i += 1

	def refresh(self):
		self.store.clear()

		for dev in ccid.devlist():
			try:
				d = ccid.ccid(dev, None)
			except:
				raise
			icon = gtk.STOCK_HARDDISK
			label = '%s\nBus %d, Address %d'%(d.name, d.bus, d.addr)
			itr = self.store.append(None, (d, icon, label))

			self.__dev(itr, d)

		self.expand_all()

		sel = self.get_selection()
		sel.select_path('0')

class CCIDApplets(gtk.Notebook):
	def __switch(self, _, __, idx):
		if idx < 0:
			app = None
		else:
			app = self.get_nth_page(idx)
		if self.callback is not None:
			self.callback(app)

	def __init__(self, cb = None):
		self.__map = {}
		self.callback = cb
		gtk.Notebook.__init__(self)
		self.connect('switch-page', self.__switch)

	def __title(self, label, *sig):
		icon = gtk.Image()
		icon.set_from_stock(gtk.STOCK_CLOSE, gtk.ICON_SIZE_MENU)
		cb = gtk.Button()
		cb.set_relief(gtk.RELIEF_NONE)
		cb.set_focus_on_click(False)
		cb.set_border_width(0)
		cb.add(icon)
		cb.connect('clicked', *sig)

		style = gtk.RcStyle()
		style.xthickness = 0
		style.ythickness = 0
		cb.modify_style(style)

		hb = gtk.HBox()
		hb.add(gtk.Label(label))
		hb.add(cb)
		hb.show_all()
		return hb

	def idx_from_app(self, app):
		assert(isinstance(app, gtk.Widget))
		i = 0
		for i in xrange(self.get_n_pages()):
			a = self.get_nth_page(i)
			if app is a:
				return i
			i += 1
		raise KeyError

	def close_tab(self, idx = None):
		if idx is None:
			idx = self.get_current_page()
			a = self.get_nth_page(idx)
		elif isinstance(idx, gtk.Widget):
			a = idx
			idx = self.idx_from_app(a)
		else:
			a = self.get_nth_page(idx)

		del self.__map[a.cci]
		self.remove_page(idx)
		if not self.get_n_pages():
			self.__switch(None, None, -1)
		return

	def __close_tab(self, button, tab = None):
		return self.close_tab(tab)

	def open_tab(self, parent, cci, app, title):
		if not self.__map.has_key(cci):
			a = app(parent, cci)
			a.cci = cci
			a.show_all()

			t = self.__title(title, self.__close_tab, a)

			idx = self.append_page(a, t)
			self.set_tab_reorderable(a, True)

			self.__map[cci] = idx

		self.set_current_page(self.__map[cci])
		return self.get_nth_page(self.get_current_page())

class CCIDToolbar(gtk.Toolbar):
	def __init__(self, defaults = []):
		gtk.Toolbar.__init__(self)
		self.defaults = defaults
		self.clear()

	def clear(self):
		n = self.get_n_items()
		for i in xrange(n):
			self.remove(self.get_nth_item(0))
		for i in self.defaults:
			self.append_item(*i)
		self.insert(gtk.SeparatorToolItem(), -1)
		self.show_all()

	def append_item(self, txt, iname, cb):
		icon = gtk.Image()
		icon.set_from_stock(iname, gtk.ICON_SIZE_LARGE_TOOLBAR)
		item = gtk.ToolButton(icon, txt)
		item.set_tooltip_text(txt)
		item.set_is_important(True)
		item.set_visible_horizontal(True)
		item.set_visible_vertical(True)
		if cb is not None:
			item.connect('clicked', cb)
		item.show_all()
		self.insert(item, -1)

	def set_toolbar(self, app):
		self.clear()
		if app is not None:
			items = app.toolbar()
			for i in items:
				self.append_item(*i)

	def set_default(self, items):
		self.defaults = items


class CCIDShell(gtk.Window):
	def status(self, status):
		self.__sb.pop(9)
		self.__sb.push(0, status)

	def destroy(self, *_):
		gtk.Window.destroy(self)
		gtk.main_quit()

	def close_win(self, *_):
		if self.__nb.get_n_pages():
			self.__nb.close_tab()
		else:
			self.destroy(*_)

	def select_item(self, item):
		if isinstance(item, ccid.ccid):
			return
		elif isinstance(item, ccid.slot):
			label = '%s slot: %d'%(item.owner.name, item.index)
		elif isinstance(item, ccid.rfid):
			label = '%s field: %d'%(item.owner.name, item.index)

		(desc, app) = self.apps['emv']
		a = self.__nb.open_tab(self, item, app, desc)

	def __app_select(self, app):
		self.__tb.set_toolbar(app)

	def refresh(self, *_):
		self.__dv.refresh()
		self.status('Re-scanned devices')

	def __init__(self, apps = []):
		gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
		self.set_default_size(800, 600)
		self.set_title('CCID Utils')

		self.connect('destroy', self.destroy)
		agr = gtk.AccelGroup()
		(k, m) = gtk.accelerator_parse('<Control>Q')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.destroy)
		(k, m) = gtk.accelerator_parse('<Control>W')
		agr.connect_group(k, m, gtk.ACCEL_VISIBLE, self.close_win)
		self.add_accel_group(agr)

		tb = [ \
			('Refresh', gtk.STOCK_REFRESH, self.refresh)
			]
		self.apps = {}
		for (name,desc,app) in apps:
			self.apps[name] = (desc,app)

		self.__sb = gtk.Statusbar()
		self.__tb = CCIDToolbar(tb)
		self.__nb = CCIDApplets(self.__app_select)
		self.__dv = CCIDeviceView(self.select_item)
		self.__app = {}

		vb = gtk.VBox()

		hp = gtk.HPaned()
		hp.add1(self.__dv)
		hp.add2(self.__nb)

		vb.pack_start(self.__tb, False, False)
		vb.pack_start(hp)
		vb.pack_start(self.__sb, False, False)

		self.add(vb)
		self.show_all()
		self.status('Scanned devices')

		gtk.main()
	
if __name__ == '__main__':
	CCIDShell([('emv', 'EMV Payment Card', EMVShell)])
