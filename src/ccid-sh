#!/usr/bin/python

__copyright__ = "Copyright (c) 2008 Gianni Tedesco"
__licence__ = "GPLv3"

import os, readline, atexit
import ccid

class scsh:
	"An interactive chip-card shell using libccid."

	def cmd_quit(self, str, *arg):
		"Exit the shell."

		raise SystemExit

	def cmd_help(self, str, *arg):
		"Print out a help message."

		self.out("You need help:")
		keys = self.__cmd.keys()
		keys.sort()
		for x in keys:
			self.out("  %-10s: %s"%(x, self.__cmd[x].__doc__))

	def cmd_on(self, str, *arg):
		"Power on the slot and retrieve ATR."

		if len(arg):
			if arg[0].upper() == "AUTO":
				v = ccid.CHIPCARD_AUTO_VOLTAGE
			elif arg[0].upper() == "5":
				v = ccid.CHIPCARD_5V
			elif arg[0].upper() == "3":
				v = ccid.CHIPCARD_3V
			elif arg[0].upper() == "1.8":
				v = ccid.CHIPCARD_1_8V
			else:
				self.out("Bad voltage: expected "
						"AUTO, 5, 3 or 1.8")
				return
		else:
			v = ccid.CHIPCARD_AUTO_VOLTAGE
		atr = self.__slot.on(v)
		if len(atr):
			self.out("Got %u bytes ATR:"%len(atr))
		ccid.hex_dump(atr)

	def cmd_off(self, str, *arg):
		"Power off the slot."

		self.__slot.off()

	def cmd_wait(self, str, *arg):
		"Wait for card insertion."

		self.__slot.wait_for_card()

	def cmd_rxlen(self, str, *arg):
		"Set RX len."

		if len(arg):
			newrx = int(arg[0])
			if newrx != self.__rxlen:
				self.__rxlen = newrx
				self.__xfr = ccid.xfr(self.__txlen,
							self.__rxlen)

		self.out("RX_LEN = %u"%self.__rxlen)

	def cmd_txlen(self, str, *arg):
		"Set TX len."

		if len(arg):
			newtx = int(arg[0])
			if newtx != self.__txlen:
				self.__txlen = newtx
				self.__xfr = ccid.xfr(self.__txlen,
							self.__rxlen)

		self.out("TX_LEN = %u"%self.__txlen)

	def cmd_cla(self, str, *arg):
		"Set CLA."

		if len(arg):
			self.__cla = int(arg[0], 0) & 0xff
		self.out("CLA = 0x%.2x"%self.__cla)

	def cmd_transmit(self, str, *arg):
		"Transmit a raw APDU (except for CLA)."

		self.__xfr.reset()
		self.__xfr.tx_byte(self.__cla)
		for x in arg:
			self.__xfr.tx_byte(int(x, 16))
		self.__slot.transact(self.__xfr)
		self.__dump_results()

	def select_by_id(self, str, *arg):
		if len(arg) == 1 and arg[0] == "..":
			# select parent DF
			self.do_select(3, 0)
		elif len(arg):
			id = int(arg[0], 0)
			idbuf = chr(id >> 8) + chr(id & 0xff)
			self.do_select(0, 0, idbuf)
		else:
			raise ValueError, "id (..|id)"


	def select_by_name(self, str, *arg):
		try:
			name = ''
			for x in arg:
				name += chr(int(x, 16))
		except:
			name = str
		self.do_select(1<<2, 0, name)

	def select_by_path(self, str, *arg):
		raise ValueError, "Not implemented"

	def do_select(self, p1, p2, data = None):
		(sw1, sw2, data) = self.pdu(0xa4, p1, p2, data, 0)
		if sw1 == 0x61 or sw1 == 0x9f:
			return self.pdu(0xc0, 0, 0, le = sw2)
		else:
			return (sw1, sw2, data)

	def cmd_select(self, str, *arg):
		"Select a file by ID, name or path."

		if len(arg) == 0:
			raise ValueError, "(id|name|path) [optional..]"

		str = str[len(arg[0]):].lstrip()
		if arg[0] == "id":
			self.select_by_id(str, *arg[1:])
		elif arg[0] == "name":
			self.select_by_name(str, *arg[1:])
		elif arg[0] == "path":
			self.select_by_path(str, *arg[1:])
		else:
			raise ValueError, "by id name or path?"

		self.__dump_results()

	def cmd_ber(self, str, *arg):
		"Enable or disable BER TLV decoding of responses."

		if len(arg):
			a = arg[0].lower()
			if a in ["on", "true", "yes"]:
				self.__ber = True
			elif a in ["off", "false", "no"]:
				self.__ber = False
			else:
				raise ValueError, "on/off"

		self.out("BER TLV decoding: %s"%( \
			self.__ber and "on" or "off"))

	def cmd_hex(self, str, *arg):
		"Enable or disable HEX decoding of responses."

		if len(arg):
			a = arg[0].lower()
			if a in ["on", "true", "yes"]:
				self.__hex = True
			elif a in ["off", "false", "no"]:
				self.__hex = False
			else:
				raise ValueError, "on/off"

		self.out("HEX decoding: %s"%(self.__hex and "on" or "off"))

	def cmd_get(self, str, *arg):
		"Get a data object."

		if not len(arg):
			raise ValueError, "Must specify data object ID"

		x = int(arg[0], 0)

		(sw1, sw2, data) = self.pdu(0xca, x >> 8,  x & 0xff)
		if sw1 == 0x6c:
			self.out("0x%.4x"%x)
			self.pdu(0xca, x >> 8, x & 0xff, le = sw2)
			self.__dump_results()
		self.__dump_results()

	def cmd_bruteget(self, str, *arg):
		"Brute force data objects."

		if not len(arg):
			raise ValueError, "Must specify data object ID"

		x = int(arg[0], 0)

		x = 0
		while x < 0x10000:
			(sw1, sw2, data) = self.pdu(0xca, x >> 8,  x & 0xff)
			if sw1 == 0x6c:
				self.out("0x%.4x"%x)
				(sw1, sw2, data) = self.pdu(0xca, x >> 8,
							x & 0xff, le = sw2)
			elif sw1 == 0x90:
				self.__dump_results()
			x += 1

	def cmd_challenge(self, str, *arg):
		"Retreive a random number from the card."

		if len(arg):
			le = int(arg[0])
		else:
			le = 8

		self.pdu(0x84, 0, 0, le = le)
		self.__dump_results(ber=False)

	def cmd_read_rec(self, str, *arg):
		"Read a record from the currently selected file."

		if len(arg) < 2:
			raise ValueError, "Must specify data object ID"

		sfi = int(arg[1])
		rec = int(arg[0])
		if len(arg) > 2:
			le = int(arg[2])
		else:
			le = 0

		(sw1, sw2, tmp) = self.pdu(0xb2, rec, (sfi << 3) | 4, le = le)
		del tmp 

		if sw1 == 0x6c or sw1 == 0x67:
			self.pdu(0xb2, rec, (sfi << 3) | 4, le = sw2)

		self.__dump_results()

	def cmd_status(self, str, *arg):
		"Display hardware status."

		# clock first because it updates status
		c = self.__slot.clock_status()
		s = self.__slot.status()

		cstr = {
			ccid.CHIPCARD_ACTIVE: "ACTIVE",
			ccid.CHIPCARD_PRESENT: "PRESENT",
			ccid.CHIPCARD_NOT_PRESENT: "NOT PRESENT"
		}
		self.out("Status: " + cstr[c])

		sstr = {
			ccid.CHIPCARD_CLOCK_START: "Running",
			ccid.CHIPCARD_CLOCK_STOP_L: "Stopped in LO state",
			ccid.CHIPCARD_CLOCK_STOP_H: "Stopped in HI state",
			ccid.CHIPCARD_CLOCK_STOP: "Stopped"
		}
		self.out("Clock: " + sstr[s])

	def cmd_brutecla(self, str, *arg):
		"Brute force CLA."

		ret = {}
		i = 0
		while i < 0xff:
			self.__xfr.reset()
			self.__xfr.tx_byte(i)
			self.__xfr.tx_byte(0)
			self.__xfr.tx_byte(0)
			self.__xfr.tx_byte(0)
			self.__xfr.tx_byte(0)
			self.__slot.transact(self.__xfr)
			sw1 = self.__xfr.rx_sw1()
			sw2 = self.__xfr.rx_sw2()
			if sw1 != 0x6e:
				if not ret.has_key((sw1, sw2)):
					ret[(sw1, sw2)] = []
				ret[(sw1, sw2)].append(i)
			i += 1

		for k in ret.keys():
			(sw1, sw2) = k
			self.out("Found %u classes, SW1=%.2x SW2=%.2x: %s"%(
					len(ret[k]), sw1, sw2,
					self.get_str_sw(sw1, sw2)))
			for v in ret[k]:
				self.out(" o CLA %.2x"%v)

	def cmd_brutefs(self, str, *arg):
		"Brute force file ID's."

		ret = {}
		i = 0x3f01

		dir = []
		for elem in arg:
			x = int(elem, 0)
			idbuf = chr(x >> 8) + chr(x & 0xff)
			dir.append(idbuf)

		for d in dir:
			self.do_select(0, 0, d)

		while i < 0x10000:
			if i == 0x3f00:
				i += 1
				continue
			idbuf = chr(i >> 8) + chr(i & 0xff)
			self.do_select(0x0, 0, idbuf)
			sw1 = self.__xfr.rx_sw1()
			sw2 = self.__xfr.rx_sw2()
			if not ret.has_key((sw1, sw2)):
				ret[(sw1, sw2)] = []
			if len(ret[(sw1, sw2)]) < 100:
				ret[(sw1, sw2)].append(i)
			if len(ret[(sw1, sw2)]) == 100:
				ret[(sw1, sw2)].append(None)
			if sw1 == 0x90:
				for d in dir:
					self.do_select(0, 0, d)

			i += 1

		for k in ret.keys():
			(sw1, sw2) = k
			self.out("Found %u objects, SW1=%.2x SW2=%.2x: %s"%(
					len(ret[k]), sw1, sw2, 
					self.get_str_sw(sw1, sw2)))
			for v in ret[k]:
				if v == None:
					self.out(" o Some results ommitted...")
				else:
					self.out(" o ID 0x%.4x"%v)

	def cmd_bruteins(self, str, *arg):
		"Brute force INS."

		ret = {}
		i = 0
		while i < 0x100:
			# Try not to select a file incase commands are
			# file-specific.
			if i == 0xa4:
				p1 = 0xff
				p2 = 0xff
			else:
				p1 = 0
				p2 = 0

			try:
				self.pdu(i, p1, p2, le = 0)
			except:
				print "INS %.2x made card freak"%i
				i += 1
				continue

			sw1 = self.__xfr.rx_sw1()
			sw2 = self.__xfr.rx_sw2()
			if sw1 != 0x6d and sw1 != 0x6e:
				if not ret.has_key((sw1, sw2)):
					ret[(sw1, sw2)] = []
				ret[(sw1, sw2)].append(i)
			i += 1

		for k in ret.keys():
			(sw1, sw2) = k
			self.out("Found %u objects, SW1=%.2x SW2=%.2x: %s"%(
					len(ret[k]), sw1, sw2, 
					self.get_str_sw(sw1, sw2)))
			for v in ret[k]:
				str = self.get_str_ins(v)
				if str == None:
					str = ""
				else:
					str = " (%s)"%str

				self.out(" o INS %.2x%s"%(v, str))

	def get_str_ins(self, ins):
		if not self.__ins_db.has_key(ins):
			return None
		ent = self.__ins_db[ins]
		if len(ent) == 1:
			return ent[0][0]

		for (name, cla) in ent:
			if cla == None:
				continue
			if self.__cla == cla:
				return name

		return '/'.join(map(lambda x:x[0], ent))

	def load_ins_db(self, fn = 'ins.db'):
		f = open(fn)
		while True:
			l = f.readline()
			if l == '':
				break
			if l[0] == '#':
				continue

			tok = l.split()

			if len(tok) == 2:
				cla = None
			elif len(tok) == 3:
				cla = int(tok[2], 0)
			else:
				raise ValueError, "Malformed INS file"

			ins = int(tok[0], 0)
			name = tok[1]
			del tok

			if not self.__ins_db.has_key(ins):
				self.__ins_db[ins] = []
			self.__ins_db[ins].append((name, cla))

	def load_sw_db(self, fn = 'sw.db'):
		f = open(fn)
		cur = None
		while True:
			l = f.readline()
			if l == '':
				break
			if l[0] == '#':
				continue

			tok = l[:-1].split(None, 1)
			if len(tok) != 2:
				raise ValueError, "Malformed SW file"

			sw = int(tok[0], 0)
			name = tok[1]
			del tok

			if l[0] == '\t':
				(name, d) = cur
				d[sw] = name
			else:
				if not self.__sw_db.has_key(sw):
					self.__sw_db[sw] = (name, {})

				cur = self.__sw_db[sw]

	def get_str_sw(self, sw1 = None, sw2 = None):
		if sw1 == None:
			sw1 = self.__xfr.rx_sw1()
		if sw2 == None:
			sw2 = self.__xfr.rx_sw2()

		if not self.__sw_db.has_key(sw1):
			return 'Unknown'

		(name, d) = self.__sw_db[sw1]

		if not d.has_key(sw2):
			return name

		return d[sw2]

	def pdu(self, ins, p1, p2, data = None, le = None):
		self.__xfr.reset()
		self.__xfr.tx_byte(self.__cla)
		self.__xfr.tx_byte(ins)
		self.__xfr.tx_byte(p1)
		self.__xfr.tx_byte(p2)
		totlen = 4
		if data != None:
			self.__xfr.tx_byte(len(data)) # Lc
			self.__xfr.tx_str(data)
			totlen += 1 + len(data)
		if  le != None:
			self.__xfr.tx_byte(le)
			totlen += 1
		while totlen < 5:
			self.__xfr.tx_byte(0)
			totlen += 1
		self.__slot.transact(self.__xfr)
		return (self.__xfr.rx_sw1(),
				self.__xfr.rx_sw2(),
				self.__xfr.rx_data())

	def __dump_results(self, ber = None):
		ret = self.__xfr.rx_data()
		self.out("SW1 = 0x%.2x : SW2 = 0x%.2x : %s (%u bytes)"%(
				self.__xfr.rx_sw1(),
				self.__xfr.rx_sw2(),
				self.get_str_sw(),
				len(ret)))
		if len(ret):
			if ber == None:
				if self.__hex:
					ccid.hex_dump(ret);
				if self.__ber:
					ccid.ber_dump(ret);
			elif ber == True:
				ccid.ber_dump(ret);
			elif ber == False:
				ccid.hex_dump(ret);
			else:
				raise ValueError, "ber == %r"%ber

	def __init__(self, tracefile=None):
		self.__cci = ccid.cci(tracefile)
		self.__slot = self.__cci.get_slot(0)
		self.__txlen = 1024
		self.__rxlen = 1024
		self.__xfr = ccid.xfr(self.__txlen, self.__rxlen)
		self.__cla = 0
		self.__hex = True
		self.__ber = False
		self.__ins_db = {}
		self.__sw_db = {}
		self.__cmd = {
			"status":	self.cmd_status,
			"slot_on":	self.cmd_on,
			"slot_off":	self.cmd_off,
			"quit":		self.cmd_quit,
			"wait":		self.cmd_wait,
			"rx_len":	self.cmd_rxlen,
			"tx_len":	self.cmd_txlen,
			"cla":		self.cmd_cla,
			"transmit":	self.cmd_transmit,
			"brute_cla":	self.cmd_brutecla,
			"brute_ins":	self.cmd_bruteins,
			"brute_get":	self.cmd_bruteget,
			"brute_fs":	self.cmd_brutefs,
			"select":	self.cmd_select,
			"read_rec":	self.cmd_read_rec,
			"challenge":	self.cmd_challenge,
			"get":		self.cmd_get,
			"ber":		self.cmd_ber,
			"hex":		self.cmd_hex,
			"help":		self.cmd_help,
			"?":		self.cmd_help,
		}

	def prompt(self):
		status = self.__slot.status()
		if status == ccid.CHIPCARD_NOT_PRESENT:
			return "ccid-$ "
		else:
			return "ccid-# "

	def trace(self, str):
		self.__cci.log("ccid> " + str + "\n")

	def out(self, str):
		print "ccid> " + str

	def command(self, str):
		arg = str.split()
		if len(arg) < 1:
			return
		str = str[len(arg[0]):].lstrip()

		if not self.__cmd.has_key(arg[0]):
			self.out("Unknown command: %s"%arg[0])
			return

		try:
			self.__cmd[arg[0]](str, *arg[1:])
		except IOError:
			if self.__slot.status() == ccid.CHIPCARD_NOT_PRESENT:
				self.out("Card not present!!")
			else:
				pass
		except ValueError, e:
			self.out("Command failed: %s: %s"%(arg[0], e.message))

######### PROGRAM MAIN LOOP #########
if __name__ == '__main__':
	# TODO: Parse command line for log-file and databases
	shell = scsh("ccid-sh.log")

	# Command historry file
	histfile = os.path.join(os.environ["HOME"], ".ccid-sh")
	try:
		readline.read_history_file(histfile)
	except IOError:
		pass
	atexit.register(readline.write_history_file, histfile)
	del os, histfile

	# Instruction names
	try:
		shell.load_ins_db()
	except IOError:
		pass

	# Error code names
	try:
		shell.load_sw_db()
	except IOError:
		pass

	while True:
		try:
			str = raw_input(shell.prompt())
		except EOFError:
			print
			break
		except KeyboardInterrupt:
			print
			continue

		try:
			shell.command(str);
		except KeyboardInterrupt:
			continue
