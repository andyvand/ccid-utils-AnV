#!/usr/bin/python

import gobject, gtk
import ccid
import emv

def destroy(w):
	gtk.main_quit()

visa1152_mod =  "\xA8\x9F\x25\xA5\x6F\xA6\xDA\x25" \
		"\x8C\x8C\xA8\xB4\x04\x27\xD9\x27" \
		"\xB4\xA1\xEB\x4D\x7E\xA3\x26\xBB" \
		"\xB1\x2F\x97\xDE\xD7\x0A\xE5\xE4" \
		"\x48\x0F\xC9\xC5\xE8\xA9\x72\x17" \
		"\x71\x10\xA1\xCC\x31\x8D\x06\xD2" \
		"\xF8\xF5\xC4\x84\x4A\xC5\xFA\x79" \
		"\xA4\xDC\x47\x0B\xB1\x1E\xD6\x35" \
		"\x69\x9C\x17\x08\x1B\x90\xF1\xB9" \
		"\x84\xF1\x2E\x92\xC1\xC5\x29\x27" \
		"\x6D\x8A\xF8\xEC\x7F\x28\x49\x20" \
		"\x97\xD8\xCD\x5B\xEC\xEA\x16\xFE" \
		"\x40\x88\xF6\xCF\xAB\x4A\x1B\x42" \
		"\x32\x8A\x1B\x99\x6F\x92\x78\xB0" \
		"\xB7\xE3\x31\x1C\xA5\xEF\x85\x6C" \
		"\x2F\x88\x84\x74\xB8\x36\x12\xA8" \
		"\x2E\x4E\x00\xD0\xCD\x40\x69\xA6" \
		"\x78\x31\x40\x43\x3D\x50\x72\x5F"
visa1152_exp =  "\x03"

keytbl = {7: (visa1152_mod, visa1152_exp)}

def mod(idx):
	try:
		return keytbl[idx][0]
	except:
		print "key index %d not found"%idx
		return None
def exp(idx):
	try:
		return keytbl[idx][1]
	except:
		print "key index %d not found"%idx
		return None

class EMVShell(gtk.Window):
	def __data_tree_init(self):
		ts = gtk.TreeStore(gobject.TYPE_STRING, gobject.TYPE_STRING)

		t = gtk.TreeView(ts)
		t.set_headers_visible(True)
		t.set_headers_clickable(True)
		t.set_enable_search(True)
		t.set_search_column(0)

		cols = [("Tag", 0), ("Data", 1)]
		for (title,c) in cols:
			r = gtk.CellRendererText()
			col = gtk.TreeViewColumn(title, r, text = c)
			col.set_resizable(True)
			t.append_column(col)

		return (ts, t)

	def __add_children(self, iter, d):
		for (k, v) in d.children().items():
			i = self.__ts.append(iter,
						(v.tag_label(),
						v.value()))
			self.__add_children(i, v)

	def __read_data(self):
		recs = self.__emv.read_app_data()
		for x in recs:
			i = self.__ts.append(None, (x.tag_label(), None))
			self.__add_children(i, x)

	def __init__(self, card):
		gtk.Window.__init__(self)
		self.set_default_size(640, 480)
		self.connect("destroy", destroy)

		(ts, t) = self.__data_tree_init()
		self.__ts = ts

		vs = gtk.ScrolledWindow()
		vs.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		vs.add(t)

		self.__emv = emv.card(card)
		self.__pse_apps = self.__emv.appsel_pse()
		self.__emv.select_pse(self.__pse_apps[0])
		self.__emv.init()
		self.__read_data()
		self.__emv.authenticate_static_data(mod, exp)

		self.add(vs)

def acquire_card(tracefile=None):
	cci = ccid.cci(tracefile)
	slot = cci.get_slot(0)
	slot.on(ccid.CHIPCARD_AUTO_VOLTAGE)
	return slot

if __name__ == '__main__':
	card = acquire_card()
	w = EMVShell(card)
	w.show_all()
	gtk.main()
