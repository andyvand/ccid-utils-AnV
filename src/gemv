#!/usr/bin/python

import gobject, gtk
import gnome
from gnome import ui
import ccid
import emv

visa1152_mod =  "\xA8\x9F\x25\xA5\x6F\xA6\xDA\x25" \
		"\x8C\x8C\xA8\xB4\x04\x27\xD9\x27" \
		"\xB4\xA1\xEB\x4D\x7E\xA3\x26\xBB" \
		"\xB1\x2F\x97\xDE\xD7\x0A\xE5\xE4" \
		"\x48\x0F\xC9\xC5\xE8\xA9\x72\x17" \
		"\x71\x10\xA1\xCC\x31\x8D\x06\xD2" \
		"\xF8\xF5\xC4\x84\x4A\xC5\xFA\x79" \
		"\xA4\xDC\x47\x0B\xB1\x1E\xD6\x35" \
		"\x69\x9C\x17\x08\x1B\x90\xF1\xB9" \
		"\x84\xF1\x2E\x92\xC1\xC5\x29\x27" \
		"\x6D\x8A\xF8\xEC\x7F\x28\x49\x20" \
		"\x97\xD8\xCD\x5B\xEC\xEA\x16\xFE" \
		"\x40\x88\xF6\xCF\xAB\x4A\x1B\x42" \
		"\x32\x8A\x1B\x99\x6F\x92\x78\xB0" \
		"\xB7\xE3\x31\x1C\xA5\xEF\x85\x6C" \
		"\x2F\x88\x84\x74\xB8\x36\x12\xA8" \
		"\x2E\x4E\x00\xD0\xCD\x40\x69\xA6" \
		"\x78\x31\x40\x43\x3D\x50\x72\x5F"
visa1152_exp =  "\x03"

keytbl = {7: (visa1152_mod, visa1152_exp)}

def mod(idx):
	if keytbl.has_key(idx):
		return keytbl[idx][0]
	else:
		print "key index %d not found"%idx
		return None
def exp(idx):
	if keytbl.has_key(idx):
		return keytbl[idx][1]
	else:
		print "key index %d not found"%idx
		return None

class EMVPinDialog(gtk.Dialog):
	def __init__(self, parent, e):
		gtk.Dialog.__init__(self, "EMV Cardholder Verification", parent,
			gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
			(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
			 gtk.STOCK_OK, gtk.RESPONSE_OK))
		self.__emv = e
		c = self.get_content_area()
		c.add(gtk.Label("Enter PIN Number:"))
		self.__entry = gtk.Entry()
		self.__entry.set_visibility(False)
		c.add(self.__entry)
		self.show_all()

	def run(self):
		r = gtk.Dialog.run(self)
		if not r == gtk.RESPONSE_OK:
			return False
		return self.__emv.cvm_pin(self.__entry.get_text())

class EMVDolDruidPage(ui.DruidPage):
	def __entry(self, c1, c2, tag):
		if self.__tags.has_key(tag):
			(label, cb, sz) = self.__tags[tag]
			c1.pack_start(gtk.Label(label), True, True)
			e = gtk.Entry()
			self.__tags[tag] = (label, cb, sz, e)
			c2.add(e)
		else:
			print "unknown DOL tag 0x%.4x"%tag

	def __bcd(self, sz, txt):
		return ''

	def __alnum(self, sz, txt):
		return ''

	def __binary(self, sz, txt):
		return ''

	def __init__(self, cdol):
		ui.DruidPage.__init__(self)
		self.__tags = {
			0x9f02 : ("Amount Authorized", self.__bcd, 12, ),
			0x9f03 : ("Amount (Other)", self.__bcd, 12, ),
			0x9f1a : ("Country Code", self.__bcd, 3, ),
			0x0095 : ("Terminal Verification Results",
					self.__binary, 5, ),
			0x5f2a : ("Currency Code", self.__bcd, 3, ),
			0x008a : ("Authorization Response Code",
					self.__alnum, 2, ),
			0x009a : ("Transaction Date", self.__bcd, 6, ),
			0x009c : ("Transaction Type", self.__bcd, 2, ),
			0x9f37 : ("Unpredictable Number", self.__binary, 4, ) }
		self.__cdol = cdol

		vbox0 = gtk.VBox()
		hbox = gtk.HBox()
		vbox1 = gtk.VBox()
		vbox2 = gtk.VBox()
		hbox.add(vbox1)
		hbox.add(vbox2)
		vbox0.add(hbox)
		self.add(vbox0)
		for x in emv.dol_read(cdol):
			self.__entry(vbox1, vbox2, x)
	
	def create_dol(self):
		tags = {}
		for (k, v) in self.__tags.items():
			if len(v) < 4:
				continue
			(label, cb, sz, e) = v
			tags[k] = cb(sz, e.get_text())
		print tags
		return emv.dol_create(self.__cdol, {})

class EMVCryptoDruidPage(ui.DruidPage):
	def __init__(self):
		ui.DruidPage.__init__(self)
		h = gtk.HBox()

		v1 = gtk.VBox()
		v1.add(gtk.Label("Cryptogram Information Data"))
		v1.add(gtk.Label("Application Transaction Counter"))
		v1.add(gtk.Label("Cryptogram"))
		v1.add(gtk.Label("Issuer Application Data"))

		v2 = gtk.VBox()
		self.__cid = gtk.Label()
		self.__atc = gtk.Label()
		self.__cgm = gtk.Label()
		self.__iad = gtk.Label()
		v2.add(self.__cid)
		v2.add(self.__atc)
		v2.add(self.__cgm)
		v2.add(self.__iad)

		h.add(v1)
		h.add(v2)
		self.add(h)

	def cryptogram(self, rx):
		if len(rx) == 3:
			(cid, atc, cgm) = rx
			iad = None
		elif len (rx) == 4:
			(cid, atc, cgm, iad) = rx
		else:
			raise ValueError, "Bad cryptogram format"

		cl = ["AAC", "TC", "ARQC", "AAR"]
		self.__cid.set_label(cl[cid >> 6])
		self.__atc.set_label(str(atc))

		s = ""
		for x in cgm:
			s = s + "%.2x:"%ord(x)
		self.__cgm.set_label(s[:-1])

		if iad:
			s = ""
			for x in iad:
				s = s + "%.2x:"%ord(x)
			self.__iad.set_label(s[:-1])

		return

class EMVActionDialog(gtk.Dialog):
	def __cancel(self, p, d):
		self.response(gtk.RESPONSE_REJECT)

	def __prep(self, p, d):
		d.set_buttons_sensitive(False, True, True, False)

	def __prep_final(self, p, d):
		d.set_buttons_sensitive(False, False, True, False)
		d.set_show_finish(True)

	def __p1_next(self, p, d):
		dol = p.create_dol()
		try:
			rx = self.__emv.generate_ac(emv.EMV_AC_ARQC, dol)
		except Exception, e:
			self.__parent.error(e)
			self.response(gtk.RESPONSE_REJECT)
			return
		self.__p2.cryptogram(rx)

	def __p1(self, cdol1):
		p = EMVDolDruidPage(cdol1)
		p.connect("prepare", self.__prep)
		p.connect("next", self.__p1_next)
		p.connect("cancel", self.__cancel)
		return p

	def __p3_next(self, p, d):
		dol = emv.dol_create(self.__cdol2, {})
		try:
			rx = self.__emv.generate_ac(emv.EMV_AC_TC, dol)
		except Exception, e:
			self.__parent.error(e)
			self.response(gtk.RESPONSE_REJECT)
			return
		self.__p4.cryptogram(rx)

	def __p3(self, cdol2):
		p = EMVDolDruidPage(cdol2)
		p.connect("prepare", self.__prep)
		p.connect("next", self.__p3_next)
		p.connect("cancel", self.__cancel)
		self.__cdol2 = cdol2
		return p

	def __p2(self):
		p = EMVCryptoDruidPage()
		p.connect("prepare", self.__prep)
		p.connect("cancel", self.__cancel)
		return p

	def __finish(self, p, d):
		self.response(gtk.RESPONSE_OK)

	def __p4(self):
		p = EMVCryptoDruidPage()
		p.connect("prepare", self.__prep_final)
		p.connect("finish", self.__finish)
		p.connect("cancel", self.__cancel)
		return p

	def __init__(self, parent, e, cdol1, cdol2):
		gtk.Dialog.__init__(self, "EMV Application Selection", parent,
			gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
			(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
			 gtk.STOCK_OK, gtk.RESPONSE_OK))
			
		self.__parent = parent
		self.__emv = e
		self.__d = ui.Druid()
		self.__p1 = self.__p1(cdol1)
		self.__p2 = self.__p2()
		self.__p3 = self.__p3(cdol2)
		self.__p4 = self.__p4()
		self.__d.append_page(self.__p1)
		self.__d.append_page(self.__p2)
		self.__d.append_page(self.__p3)
		self.__d.append_page(self.__p4)

		self.get_content_area().add(self.__d)
		self.show_all()
		self.get_action_area().hide()
		self.set_has_separator(False)

	def run(self):
		if gtk.Dialog.run(self) == gtk.RESPONSE_REJECT:
			return False
		return True

class EMVAppDialog(gtk.Dialog):
	def __init__(self, parent, e):
		gtk.Dialog.__init__(self, "EMV Application Selection", parent,
			gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
			(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
			 gtk.STOCK_OK, gtk.RESPONSE_OK))
		self.__parent = parent
		self.__emv = e
		c = self.get_content_area()
		self.__options(c)
		self.show_all()

	def __options(self, c):
		self.__rb = []
		rb = None

		try:
			self.__pse_apps = self.__emv.appsel_pse()
		except Exception, e:
			self.__pse_apps = []
			self.__parent.error(e)

		if len(self.__pse_apps):
			c.add(gtk.Label("PSE Applications Supported by Card"))

			rb = None
			for app in self.__pse_apps:
				rb = gtk.RadioButton(rb, app.label())
				rb.emv_app = app
				rb.emv_aid = None
				self.__rb.append(rb)
				c.add(rb)
			c.add(gtk.HSeparator())


		c.add(gtk.Label("Applications Supported by Terminal"))
		for (label,aid) in [ ("LINK", "\xa0\x00\x00\x00\x29"),
				("VISA DEBIT", "\xa0\x00\x00\x00\x03") ]:
			rb = gtk.RadioButton(rb, label)
			rb.emv_app = None
			rb.emv_aid = aid
			self.__rb.append(rb)
			c.add(rb)

	def run(self):
		r = gtk.Dialog.run(self)
		if not r == gtk.RESPONSE_OK:
			return False

		sel = None
		for rb in self.__rb:
			if rb.get_active():
				sel = rb
				break
		if sel == None:
			return False

		if sel.emv_app == None:
			self.__emv.select_aid(sel.emv_aid);
		else:
			self.__emv.select_pse(sel.emv_app)

		return True

class EMVShell(ui.App):
	def destroy(self, w):
		gtk.main_quit()

	def set_status(self, str):
		self.__ab.set_status(str)

	def error(self, e):
		msg = e.args[0]
		if len(e.args) >= 3 and \
				e.args[1] == emv.EMV_ERR_EMV and \
				e.args[2] == emv.EMV_ERR_BAD_PIN:
			msg = msg + ", %d tries remaining"%\
				self.__emv.pin_try_counter()
		if msg == "":
			msg = "Unknown error"
		self.set_status(msg)
		return

	def __data_tree_init(self):
		i = gtk.Image()

		ts = gtk.TreeStore(gobject.TYPE_STRING, gobject.TYPE_STRING,
				gobject.TYPE_STRING, gobject.TYPE_STRING)

		t = gtk.TreeView(ts)
		t.set_headers_visible(True)
		t.set_headers_clickable(True)
		t.set_enable_search(True)
		t.set_search_column(0)

		r = gtk.CellRendererText()
		i = gtk.CellRendererPixbuf()
		col = gtk.TreeViewColumn("Tag", None)
		col.pack_start(i, True)
		col.add_attribute(i, "stock-id", 0)
		col.pack_start(r, True)
		col.add_attribute(r, "text", 1)
		col.set_resizable(True)
		t.append_column(col)

		r = gtk.CellRendererText()
		col = gtk.TreeViewColumn("Value", r, text = 2)
		col.add_attribute(r, "family", 3)
		col.set_resizable(True)
		t.append_column(col)

		return (ts, t)

	def __add_children(self, iter, d):
		for (k, v) in d.children().items():
			if v.type() == emv.EMV_DATA_BINARY:
				t = "Monospace"
			else:
				t = None
			i = self.__ts.append(iter,
					(None, v.tag_label(), "%r"%v, t))
			if v.sda():
				self.__sda_recs.append(i)
			self.__data[v.tag()] = v
			self.__add_children(i, v)

	def __read_data(self):
		self.__ts.clear()
		self.__data = {}
		self.__sda_recs = []
		recs = self.__emv.read_app_data()
		for x in recs:
			i = self.__ts.append(None, (None, x.tag_label(),
							None, None))
			if x.sda():
				self.__sda_recs.append(i)
			self.__add_children(i, x)

	def __appsel(self, a):
		d = EMVAppDialog(self, self.__emv)
		try:
			ret = d.run()
		except Exception, e:
			self.error(e)
			d.hide()
			return
		d.hide()
		if ret == False:
			return
		try:
			self.__emv.init()
			self.__app = self.__emv.current_app()
			self.set_status("%s selected"%self.__app.label())
			self.__read_data()
		except Exception, e:
			self.error(e)
		return

	def __sda(self, a):
		try:
			self.__emv.authenticate_static_data(mod, exp)
		except Exception, e:
			self.error(e)
			return
		self.set_status("SDA data authenticated")
		for x in self.__sda_recs:
			self.__ts.set_value(x, 0,
					gtk.STOCK_DIALOG_AUTHENTICATION)
		return

	def __cvm(self, a):
		d = EMVPinDialog(self, self.__emv)
		try:
			if d.run():
				self.set_status("Cardholder verified")
		except Exception, e:
			self.error(e)
		d.hide()
		return

	def __velocity_check(self, a):
		self.set_status("ATC %d, last online ATC %u"%(
					self.__emv.atc(),
					self.__emv.last_online_atc()))
		return

	def __transact(self, a):
		cdol1 = self.__data[emv.EMV_TAG_CDOL1].value()
		cdol2 = self.__data[emv.EMV_TAG_CDOL2].value()
		d = EMVActionDialog(self, self.__emv, cdol1, cdol2)
		if d.run():
			self.__ab.set_status("Transaction completed")
		d.hide()

	def __toolbar(self):
		t = gtk.Toolbar()
		items = [ \
				("Select Application",
					gtk.STOCK_CONNECT,
					self.__appsel),
				("Authenticate Card",
					gtk.STOCK_DIALOG_AUTHENTICATION,
					self.__sda),
				("Verify Cardholder",
					gtk.STOCK_YES,
					self.__cvm),
				("Velocity Checking",
					gtk.STOCK_NETWORK,
					self.__velocity_check),
				("Terminal Action",
					gtk.STOCK_APPLY,
					self.__transact)
			]
		for (txt, iname, cb) in items:
			icon = gtk.Image()
			icon.set_from_stock(iname, gtk.ICON_SIZE_LARGE_TOOLBAR)
			item = gtk.ToolButton(icon, txt)
			item.set_tooltip_text(txt)
			item.set_is_important(True)
			item.set_visible_horizontal(True)
			item.set_visible_vertical(True)
			item.connect("clicked", cb)
			t.insert(item, -1)
		t.show_all()
		return t

	def __init__(self, card):
		ui.App.__init__(self, "gemv", "EMV")
		self.set_default_size(640, 480)
		self.connect("destroy", self.destroy)

		self.__tb = self.__toolbar()
		self.set_toolbar(self.__tb)

		self.__ab = ui.AppBar(True, True, ui.PREFERENCES_USER)
		self.set_statusbar(self.__ab)

		(ts, t) = self.__data_tree_init()
		self.__ts = ts
		self.__sda_recs = []
		self.__data = {}

		vs = gtk.ScrolledWindow()
		vs.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		vs.add(t)

		self.__emv = emv.card(card)
		self.__app = None

		self.set_contents(vs)

def acquire_card(tracefile=None):
	cci = ccid.cci(tracefile)
	slot = cci.get_slot(0)
	slot.on(ccid.CHIPCARD_AUTO_VOLTAGE)
	return slot

def err_destroy(self):
	gtk.main_quit()
def err_destroy2(self, b):
	gtk.main_quit()

def bail(msg):
	err = gtk.MessageDialog(type = gtk.MESSAGE_ERROR,
				buttons = gtk.BUTTONS_CLOSE,
				message_format = msg)
	err.show_all()
	err.connect("destroy", err_destroy)
	err.connect("response", err_destroy2)
	gtk.main()
	raise SystemExit

if __name__ == '__main__':
	gnome.program_init("gemv", "0.1")
	try:
		card = acquire_card("gemv.trace")
	except Exception, e:
		bail("No CCI devices could be found")
	w = EMVShell(card)
	w.show_all()
	gtk.main()
