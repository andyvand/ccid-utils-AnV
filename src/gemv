#!/usr/bin/python

import gobject, gtk
import gnome
from gnome import ui
import ccid
import emv

visa1152_mod =  "\xA8\x9F\x25\xA5\x6F\xA6\xDA\x25" \
		"\x8C\x8C\xA8\xB4\x04\x27\xD9\x27" \
		"\xB4\xA1\xEB\x4D\x7E\xA3\x26\xBB" \
		"\xB1\x2F\x97\xDE\xD7\x0A\xE5\xE4" \
		"\x48\x0F\xC9\xC5\xE8\xA9\x72\x17" \
		"\x71\x10\xA1\xCC\x31\x8D\x06\xD2" \
		"\xF8\xF5\xC4\x84\x4A\xC5\xFA\x79" \
		"\xA4\xDC\x47\x0B\xB1\x1E\xD6\x35" \
		"\x69\x9C\x17\x08\x1B\x90\xF1\xB9" \
		"\x84\xF1\x2E\x92\xC1\xC5\x29\x27" \
		"\x6D\x8A\xF8\xEC\x7F\x28\x49\x20" \
		"\x97\xD8\xCD\x5B\xEC\xEA\x16\xFE" \
		"\x40\x88\xF6\xCF\xAB\x4A\x1B\x42" \
		"\x32\x8A\x1B\x99\x6F\x92\x78\xB0" \
		"\xB7\xE3\x31\x1C\xA5\xEF\x85\x6C" \
		"\x2F\x88\x84\x74\xB8\x36\x12\xA8" \
		"\x2E\x4E\x00\xD0\xCD\x40\x69\xA6" \
		"\x78\x31\x40\x43\x3D\x50\x72\x5F"
visa1152_exp =  "\x03"

keytbl = {7: (visa1152_mod, visa1152_exp)}

def mod(idx):
	if keytbl.has_key(idx):
		return keytbl[idx][0]
	else:
		print "key index %d not found"%idx
		return None
def exp(idx):
	if keytbl.has_key(idx):
		return keytbl[idx][1]
	else:
		print "key index %d not found"%idx
		return None

class EMVPinDialog(gtk.Dialog):
	def __init__(self, parent, e):
		gtk.Dialog.__init__(self, "EMV Cardholder Verification", parent,
			gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
			(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
			 gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
		self.__emv = e
		c = self.get_content_area()
		c.add(gtk.Label("Enter PIN Number:"))
		self.__entry = gtk.Entry()
		self.__entry.set_visibility(False)
		c.add(self.__entry)
		self.show_all()

	def run(self):
		r = gtk.Dialog.run(self)
		if r == gtk.RESPONSE_CANCEL:
			return False
		return self.__emv.cvm_pin(self.__entry.get_text())

class EMVAppDialog(gtk.Dialog):
	def __init__(self, parent, e):
		gtk.Dialog.__init__(self, "EMV Application Selection", parent,
			gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
			(gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT,
			 gtk.STOCK_OK, gtk.RESPONSE_ACCEPT))
		self.__emv = e
		c = self.get_content_area()
		self.__options(c)
		self.show_all()

	def __options(self, c):
		self.__rb = []
		rb = None

		self.__pse_apps = self.__emv.appsel_pse()
		if len(self.__pse_apps):
			c.add(gtk.Label("PSE Applications Supported by Card"))

			rb = None
			for app in self.__pse_apps:
				rb = gtk.RadioButton(rb, app.label())
				rb.emv_app = app
				rb.emv_aid = None
				self.__rb.append(rb)
				c.add(rb)
			c.add(gtk.HSeparator())

		c.add(gtk.Label("Applications Supported by Terminal"))
		for (label,aid) in [ ("LINK", "\xa0\x00\x00\x00\x29"),
				("VISA DEBIT", "\xa0\x00\x00\x00\x03") ]:
			rb = gtk.RadioButton(rb, label)
			rb.emv_app = None
			rb.emv_aid = aid
			self.__rb.append(rb)
			c.add(rb)

	def run(self):
		r = gtk.Dialog.run(self)
		if r == gtk.RESPONSE_CANCEL:
			return False

		for rb in self.__rb:
			if rb.get_active():
				break
		if rb == None:
			return False

		if rb.emv_app == None:
			print "Select by AID"
		else:
			self.__emv.select_pse(rb.emv_app)

		return True

class EMVShell(ui.App):
	def destroy(self, w):
		gtk.main_quit()

	def __data_tree_init(self):
		i = gtk.Image()

		ts = gtk.TreeStore(gobject.TYPE_STRING, gobject.TYPE_STRING,
					gobject.TYPE_STRING)

		t = gtk.TreeView(ts)
		t.set_headers_visible(True)
		t.set_headers_clickable(True)
		t.set_enable_search(True)
		t.set_search_column(0)

		r = gtk.CellRendererText()
		i = gtk.CellRendererPixbuf()
		col = gtk.TreeViewColumn("Tag", None)
		col.pack_start(i, True)
		col.add_attribute(i, "stock-id", 0)
		col.pack_start(r, True)
		col.add_attribute(r, "text", 1)
		col.set_resizable(True)
		t.append_column(col)

		r = gtk.CellRendererText()
		col = gtk.TreeViewColumn("Value", r, text = 2)
		col.set_resizable(True)
		t.append_column(col)

		return (ts, t)

	def __add_children(self, iter, d):
		for (k, v) in d.children().items():
			i = self.__ts.append(iter,
						(None, v.tag_label(),
						v.value()))
			if v.sda():
				self.__sda_recs.append(i)
			self.__add_children(i, v)

	def __read_data(self):
		self.__ts.clear()
		self.__sda_recs = []
		recs = self.__emv.read_app_data()
		for x in recs:
			i = self.__ts.append(None, (None, x.tag_label(), None))
			if x.sda():
				self.__sda_recs.append(i)
			self.__add_children(i, x)

	def __appsel(self, a, b):
		d = EMVAppDialog(self, self.__emv)
		d.run()
		d.hide()
		self.__emv.init()
		self.__app = self.__emv.current_app()
		self.__ab.set_status("%s selected"%self.__app.label())
		self.__read_data()
		return

	def __sda(self, a, b):
		if not self.__emv.authenticate_static_data(mod, exp):
			self.__ab.set_status("SDA data authenticated failed")
			return
		self.__ab.set_status("SDA data authenticated")
		for x in self.__sda_recs:
			self.__ts.set_value(x, 0,
					gtk.STOCK_DIALOG_AUTHENTICATION)
		return

	def __cvm(self, a, b):
		d = EMVPinDialog(self, self.__emv)
		if d.run():
			msg = "Cardholder verified"
		else:
			msg = "Cardholder verification failed: " \
				"%u tries remaining"% \
				self.__emv.pin_try_counter()
		d.hide()
		self.__ab.set_status(msg)
		return

	def __toolbar(self):
		t = gtk.Toolbar()
		items = [ \
				("Select Application",
					gtk.STOCK_CONNECT,
					self.__appsel),
				("Authenticate Card",
					gtk.STOCK_DIALOG_AUTHENTICATION,
					self.__sda),
				("Verify Cardholder",
					gtk.STOCK_YES,
					self.__cvm)
			]
		for (txt, i , cb) in items:
			icon = gtk.Image()
			icon.set_from_stock(i, gtk.ICON_SIZE_LARGE_TOOLBAR)
			t.append_item(txt, txt, None, icon, cb, self)
		return t

	def __init__(self, card):
		ui.App.__init__(self, "gemv", "EMV")
		self.set_default_size(640, 480)
		self.connect("destroy", self.destroy)

		self.__tb = self.__toolbar()
		self.set_toolbar(self.__tb)

		self.__ab = ui.AppBar(True, True, ui.PREFERENCES_USER)
		self.set_statusbar(self.__ab)

		(ts, t) = self.__data_tree_init()
		self.__ts = ts

		vs = gtk.ScrolledWindow()
		vs.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		vs.add(t)

		self.__emv = emv.card(card)

		self.set_contents(vs)

def acquire_card(tracefile=None):
	cci = ccid.cci(tracefile)
	slot = cci.get_slot(0)
	slot.on(ccid.CHIPCARD_AUTO_VOLTAGE)
	return slot

if __name__ == '__main__':
	gnome.program_init("gemv", "0.1")
	card = acquire_card()
	w = EMVShell(card)
	w.show_all()
	gtk.main()
